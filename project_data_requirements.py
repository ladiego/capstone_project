# -*- coding: utf-8 -*-
"""capstone_project_modul1_data_requirements.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y5bSmg1GiJmdi1V_FLEWTmPx57-4_UZk

###Extract Data
"""

import pandas as pd
df = pd.read_csv('https://raw.githubusercontent.com/ladiego/capstone_project/refs/heads/modul1/data_requirements.csv')
df.info()

df.head()

df_new=df.copy()

"""###Delete column 'Unnamed : 0'"""

df_new.drop('Unnamed: 0',axis=1,inplace=True)

df_new.head(1)

df_new.isnull().any()

df_new.isnull().sum()

"""###Delete value in column"""

df_new['company_rating'].unique()

df_new = df_new.drop(df_new[(df_new['company_rating'] <= 2) | df_new['company_rating'].isnull()].index)
df_new.info()
df_new.head(1)

"""### Change value name in company column"""

df_new[['company','company_rating']].head(3)

df_new['company']=df_new['company'].str.split("\n").str[0]
df_new['company'].tail()

"""###Reset index"""

df_new.reset_index(inplace=True)
df_new

"""###standardize salary"""

df_new['salary_estimate'].unique()

import numpy as np
def conv_salary(salary):
    if pd.isna(salary):
        return np.nan
    salary = salary.replace('$', '').replace(',', '').replace('yr (est.)', '').replace('mo (est.)', '').replace('hr (est.)', '').replace('/', '')
    return float(salary)

df_new['salary_per_year'] = df_new['salary_estimate'].apply(conv_salary)
df_new[['salary_estimate', 'salary_per_year']]

def stand_salary(salary, period):
    period = str(period)
    if 'hr' in period:  #assume work 40 hr/week, 1 year = 52 weeks, so 1 year = 40*52 = 2080
        return salary * 2080
    elif 'mo' in period:
        return salary * 12
    return salary

df_new['salary_per_year'] = df_new.apply(lambda row: stand_salary(row['salary_per_year'], row['salary_estimate']), axis=1)
df_new[['salary_estimate', 'salary_per_year']]

"""###convert datetime to jakarta time



"""

df_new['dates'].tail(5)

import datetime as dt
from dateutil import tz, parser
import pandas as pd

jakarta = tz.gettz('Asia/Jakarta')
def convert(timestamp):
  dt = parser.parse(timestamp)
  return dt.astimezone(jakarta)

df_new['new_dates']=df_new['dates'].apply(convert)
df_new[['dates','new_dates']].tail()

"""###Creat new columns"""

df_new[['city', 'state']]=df_new['location'].str.split(',', expand=True, n=1)
df_new[['location','city','state']].head()

df_new = df_new.fillna(value='the company decided to keep')
df_new.head()

df_new['location'].value_counts()

df_new['job_title'].value_counts()

df_new['company_size'].value_counts()

df_new['company_revenue'].value_counts()

df_new['company_sector'].value_counts()

df_new[df_new['company_sector']=="Information Technology"]['company_type'].value_counts()

df_new[df_new['company_sector']=="Healthcare"]['company_industry'].value_counts()

df_new[df_new['company_sector']=="Healthcare"][df_new['company_rating']>3]['company_industry'].value_counts()

df_new['salary_per_year']=pd.to_numeric(df_new['salary_per_year'], errors='coerce').fillna(0)
df_new.groupby('location')['salary_per_year'].sum().sort_values(ascending=False).head(5)

df_new.groupby('company_sector')['salary_per_year'].max()

name = df_new[df_new['salary_per_year']==df_new['salary_per_year'].min()]['job_title']
df_new[df_new['job_title']==name.iloc[0]]

